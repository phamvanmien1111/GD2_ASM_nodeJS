import ProfileMe from '../models/Profile.js';

class ProfileMeController {
    // Hi·ªÉn th·ªã trang ProfileMe
    static async index(req, res) {
        try {
            console.log("üî¥ Session khi truy c·∫≠p profileMe:", req.session);
    
            if (!req.session.user) {
                console.log("‚õî Kh√¥ng t√¨m th·∫•y user trong session, chuy·ªÉn h∆∞·ªõng ƒëƒÉng nh·∫≠p");
                return res.redirect('/dangnhap');
            }
    
            const userId = req.session.user.UserID;
            
            // üîç L·∫•y th√¥ng tin user t·ª´ database
            const user = await ProfileMe.getProfileMe(userId);
    
            // üîç L·∫•y danh s√°ch b√†i vi·∫øt c·ªßa user
            const posts = await ProfileMe.getPost(userId);
            console.log("üìù B√†i vi·∫øt c·ªßa user:", posts);
            posts.forEach(post => {
                if (post.CreatedAt) {
                    const date = new Date(post.CreatedAt); // Chuy·ªÉn chu·ªói ISO th√†nh Date object
                    post.CreatedAt = date.toLocaleTimeString("vi-VN", { 
                        hour: "2-digit", 
                        minute: "2-digit", 
                        hour12: false // ƒê·ªãnh d·∫°ng 24h
                    });
                }
            });
            console.log("üìù B√†i vi·∫øt:", posts); // üü¢ Debug xem c√≥ d·ªØ li·ªáu kh√¥ng
            res.render('profile/profileMe', { 
                showHeaderFooter: true, 
                profile: user, 
                posts 
            });
        } catch (error) {
            console.error("‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu profile:", error);
            res.status(500).send("L·ªói server");
        }
    }
    // static async editProfileMe(req, res) {
    //     try {
    //         if (!req.session.user) {
    //             return res.redirect('/dangnhap'); // N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p th√¨ chuy·ªÉn h∆∞·ªõng
    //         }
    //         console.log('User:', req.session.user);
    //         res.render('profile/editProfileMe', { 
    //             showHeaderFooter: true, 
    //             profile: req.session.user 
    //         });
    //     } catch (error) {
    //         res.status(500).send('L·ªói server');
    //     }
    // }
    static async editProfileMe(req, res) {
        try {
            if (!req.session.user) {
                return res.redirect('/dangnhap');
            }
            
            const userId = req.session.user.UserID;
            const user = await ProfileMe.getProfileMe(userId); 
    
            res.render('profile/editProfileMe', { 
                showHeaderFooter: true, 
                profile: user 
            });
        } catch (error) {
            console.error('‚ùå L·ªói khi m·ªü trang ch·ªânh s·ª≠a:', error);
            res.status(500).send('L·ªói server');
        }
    }
    static async editPostMe(req, res) {
        try {
            if (!req.session.user) {
                return res.redirect('/dangnhap');
            }
            
            const userId = req.session.user.UserID;
            const user = await ProfileMe.getPost(userId); 
    
           res.render('profile/editpostMe', { 
    showHeaderFooter: true, 
    profile: user 
});
        } catch (error) {
            console.error('‚ùå L·ªói khi m·ªü trang ch·ªânh s·ª≠a:', error);
            res.status(500).send('L·ªói server');
        }
    }
    
    
    // L·∫•y th√¥ng tin c√° nh√¢n c·ªßa user ƒëang ƒëƒÉng nh·∫≠p
    static async getProfileMe(req, res) {
        console.log("üü¢ ƒêang ch·∫°y getProfileMe()..."); 
        try {
            const userId = req.session.user?.UserID;  
            console.log("üî¥ Session hi·ªán t·∫°i:", req.session);
            
            if (!userId) return res.status(401).json({ message: 'B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p' });
    
            // L·∫•y th√¥ng tin user
            const user = await ProfileMe.getProfileMe(userId); 
    
            // L·∫•y b√†i vi·∫øt c·ªßa user
            const posts = await ProfileMe.getPost(userId);
            console.log("üìå B√†i vi·∫øt c·ªßa user:", posts); // üü¢ In ra ƒë·ªÉ ki·ªÉm tra
            if (!posts || posts.length === 0) {
                console.log("‚ö†Ô∏è Kh√¥ng c√≥ b√†i vi·∫øt n√†o ƒë∆∞·ª£c t√¨m th·∫•y!");
            }
            return res.render('profile/profileMe', { user, posts, showHeaderFooter: true });
        } catch (error) {
            console.error('L·ªói khi l·∫•y th√¥ng tin h·ªì s∆°:', error);
            res.status(500).json({ message: 'L·ªói server', error: error.message });
        }
    }
    
    
    

    // C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n
    static async updateProfileMe(req, res) {
        try {
            const userId = req.session.user?.UserID;
            if (!userId) {
                return res.status(401).json({ success: false, message: "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p!" });
            }
    
            console.log("üü¢ D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:", req.body);
            console.log("üìå File nh·∫≠n ƒë∆∞·ª£c:", req.file);
    
            // Ki·ªÉm tra xem d·ªØ li·ªáu c√≥ b·ªã r·ªóng kh√¥ng
            if (Object.keys(req.body).length === 0 && !req.file) {
                return res.status(400).json({ success: false, message: "Kh√¥ng c√≥ d·ªØ li·ªáu g·ª≠i l√™n!" });
            }
    
            let { Username, Email, phone, Location, Bio } = req.body;
            let Avatar = req.session.user.Avatar || null;
    
            // N·∫øu c√≥ file upload, c·∫≠p nh·∫≠t Avatar
            if (req.file) {
                Avatar = '/images/' + req.file.filename;
                console.log("üìå ·∫¢nh m·ªõi ƒë∆∞·ª£c c·∫≠p nh·∫≠t:", Avatar);
            }
    
            // Tr√°nh tr∆∞·ªùng h·ª£p undefined g√¢y l·ªói SQL
            const updatedData = {
                Username: Username ?? null,
                Email: Email ?? null,
                phone: phone ?? null,
                Location: Location ?? null,
                Avatar: Avatar ?? null,
                Bio: Bio ?? null
            };
    
            console.log("üìå D·ªØ li·ªáu c·∫≠p nh·∫≠t:", updatedData);
    
            // G·ª≠i d·ªØ li·ªáu v√†o model ƒë·ªÉ c·∫≠p nh·∫≠t
            const updated = await ProfileMe.updateProfile(userId, updatedData);
    
            // Ki·ªÉm tra k·∫øt qu·∫£ c·∫≠p nh·∫≠t    
            if (updated) {
                req.session.user = { ...req.session.user, ...updatedData };
                console.log("‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng!");
    
                return res.redirect('/profileMe'); 
            } else {
                console.error("‚ùå L·ªói: Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t!");
                return res.status(400).json({ success: false, message: "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t!" });
            }
    
        } catch (error) {
            console.error("‚ùå L·ªói c·∫≠p nh·∫≠t profile:", error);
            res.status(500).json({ success: false, message: "L·ªói server!" });
        }
    }
    
    
    
    
      async getProfile(req, res) {
        const userId = req.params.id;
    
        try {
            // L·∫•y th√¥ng tin user
            const user = await Profile.getProfile(userId);
            if (!user) return res.status(404).json({ message: 'User not found' });
    
            // L·∫•y b√†i vi·∫øt c·ªßa user
            const posts = await Profile.getPost(userId);

            console.log('Posts:', posts.Avatar);
            return res.render('profile/profile', { user, posts, showHeaderFooter: true });

        } catch (error) {
            console.error(error);
            res.status(500).json({ message: 'Server error' });
        }
    } 
    static async showEditPost(req, res) {
        try {
            if (!req.session.user) {
                return res.redirect('/dangnhap');
            }

            const postId = req.params.id;
            const userId = req.session.user.UserID;

            const post = await ProfileMe.getPostById(userId, postId);

            if (!post) {
                return res.status(404).send('B√†i vi·∫øt kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a.');
            }

            res.render('profile/editPost', { showHeaderFooter: true, post });
        } catch (error) {
            console.error('‚ùå L·ªói khi m·ªü trang ch·ªânh s·ª≠a:', error);
            res.status(500).send('L·ªói server');
        }
    }

    // X·ª≠ l√Ω c·∫≠p nh·∫≠t b√†i vi·∫øt
    static async updatePost(req, res) {
        try {
            if (!req.session.user) {
                return res.redirect('/dangnhap');
            }

            const postId = req.params.id;
            const userId = req.session.user.UserID;
            const { content } = req.body;
            let imageUrl = req.file ? `/uploads/${req.file.filename}` : null;

            // L·∫•y b√†i vi·∫øt c≈©
            const post = await ProfileMe.getPostById(userId, postId);

            if (!post) {
                return res.status(404).send('B√†i vi·∫øt kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a.');
            }

            // N·∫øu kh√¥ng c√≥ ·∫£nh m·ªõi, gi·ªØ nguy√™n ·∫£nh c≈©
            if (!imageUrl) {
                imageUrl = post.ImageURL;
            }

            // C·∫≠p nh·∫≠t b√†i vi·∫øt
            await ProfileMe.updatePost(userId, postId, content, imageUrl);

            res.redirect('/profile');
        } catch (error) {
            console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t b√†i vi·∫øt:', error);
            res.status(500).send('L·ªói server');
        }
    }  
}

export default  ProfileMeController;
