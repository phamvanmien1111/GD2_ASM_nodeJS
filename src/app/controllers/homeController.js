import Post from '../models/postModel.js';

const homeController = {
  async index(req, res) {
    try {
      console.log("üü¢ Session sau khi ƒëƒÉng nh·∫≠p:", req.session);


      const posts = await Post.fetchAll();
      posts.forEach(post => {
        const date = new Date(post.CreatedAt);
        post.FormattedTime = date.toLocaleTimeString("vi-VN", { hour: "2-digit", minute: "2-digit" });
      });
      res.render('home', { posts, title: 'Home', showHeaderFooter: true });
    } catch (error) {
      res.status(500).json({ message: 'L·ªói m√°y ch·ªß' });
    }
  },

  // L·∫•y t·∫•t c·∫£ b√†i vi·∫øt (API)
  async getAllPosts(req, res) {
    try {
      const posts = await Post.fetchAll();
      res.status(200).json(posts);
    } catch (err) {
      res.status(500).json({ error: 'Failed to fetch posts' });
    }
  },

  // L·∫•y b√†i vi·∫øt theo ID (API)
  async getPostById(req, res) {
    try {
      const post = await Post.getPostById(req.params.id);
      if (!post) {
        return res.status(404).json({ error: 'Post not found' });
      }
      res.status(200).json(post);
    } catch (err) {
      res.status(500).json({ error: 'Failed to fetch post' });
    }
  },

  async createPost(req, res) {
    try {
      console.log("Body nh·∫≠n ƒë∆∞·ª£c:", req.body); // Debug d·ªØ li·ªáu form

      const { Content, UserID } = req.body;
      const image = req.file ? req.file.filename : null;

      if (!UserID) {
        console.error("‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y UserID trong request body");
        return res.status(400).json({ error: "UserID kh√¥ng h·ª£p l·ªá" });
      }

      const userId = parseInt(UserID, 10);
      if (isNaN(userId)) {
        console.error("‚ùå L·ªói: UserID kh√¥ng h·ª£p l·ªá:", UserID);
        return res.status(400).json({ error: "UserID kh√¥ng h·ª£p l·ªá" });
      }

      console.log("File nh·∫≠n ƒë∆∞·ª£c:", req.file);
      const postId = await Post.createPost(Content, image, userId);
      res.redirect("/home");
    } catch (error) {
      console.error("L·ªói khi t·∫°o b√†i vi·∫øt:", error.message);
      res.status(500).json({ error: error.message });
    }
  },

  async searchPosts(req, res) {
    try {
      console.log("üîç Query params nh·∫≠n ƒë∆∞·ª£c:", req.query);

      if (!req.query.title && !req.query.content && !req.query.author && !req.query.date) {
        return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm." });
      }

      const posts = await Post.search(req.query);
      res.render("search", { posts, title: "K·∫øt qu·∫£ t√¨m ki·∫øm", showHeaderFooter: true });
    } catch (error) {
      console.error("‚ùå L·ªói khi t√¨m ki·∫øm b√†i vi·∫øt:", error);
      res.status(500).json({ message: "‚ùå L·ªói server", error });
    }
  },
};

export default homeController;
